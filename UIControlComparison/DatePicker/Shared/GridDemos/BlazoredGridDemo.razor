@using Blazored.Typeahead
@using DatePicker.Model
@using Sotsera.Blazor.Toaster


<DataGrid TItem="Film"
          Data="@Films"
          UseInternalEditing="true"
          EditMode="DataGridEditMode.Inline"
          ShowPager="false"
          Editable="true"
          Hoverable="true"
          SelectedRow="SelectedFilm"
          SelectedRowChanged="RowSelectHandler"
          RowUpdated="RowUpdatedHandler"
          RowInserted="RowInsertedHandler"
          RowRemoving="RowRemovedHandler"
          PageSize="10">
    @*<DataGridCommandColumn TItem="Film" Width="50px">
        <NewCommandTemplate>
            <Button  Clicked="@context.Clicked" Display="Display.None">New</Button>
        </NewCommandTemplate>
        <EditCommandTemplate>
            <Button Color="Color.Primary" Clicked="@context.Clicked" Display="Display.None">Edit</Button>
        </EditCommandTemplate>
        <SaveCommandTemplate>
            <Button Color="Color.Primary" Clicked="@context.Clicked" Display="Display.None">Save</Button>
        </SaveCommandTemplate>
        <DeleteCommandTemplate>
            <Button Color="Color.Danger" Clicked="@context.Clicked"><i class="fa fa-times" aria-hidden="true"></i></Button>
        </DeleteCommandTemplate>
        <CancelCommandTemplate>
            <Button Color="Color.Secondary" Clicked="@context.Clicked" Display="Display.None">Cancel</Button>
        </CancelCommandTemplate>
        <ClearFilterCommandTemplate>
            <Button Color="Color.Warning" Clicked="@context.Clicked" Display="Display.None">Clear Filter</Button>
        </ClearFilterCommandTemplate>
    </DataGridCommandColumn>*@
    <DataGridColumn TItem="Film" Field="@nameof(Film.Title)" Caption="Title" TextAlignment="TextAlignment.Center" Sortable="true" Editable="true" Width="20" />
    <DataGridNumericColumn TItem="Film" Field="@nameof(Film.CriticScore)" Caption="Critic Score" TextAlignment="TextAlignment.Center" Sortable="true" Editable="false" Width="20" DisplayFormat="{0:N0}" />
    <DataGridCheckColumn TItem="Film" Field=@nameof(Film.IsProfitable) Caption="Is Profitable" Editable="false" Sortable="false" >
        <DisplayTemplate>
            <Check TValue="bool" Checked="context.IsProfitable" ReadOnly="false" @onclick="@(()=> { context.IsProfitable = !context.IsProfitable;  })" />
        </DisplayTemplate>
    </DataGridCheckColumn>

    @*<DataGridSelectColumn TItem="DoorSetGridRowViewModel" Field="@nameof(DoorSetGridRowViewModel.DoorTypeName)" Caption="Type" Sortable="true" Editable="true" Width="50">
            <EditTemplate>
                <Select TValue="string" SelectedValue="@((string)( ( (CellEditContext)context ).CellValue ))" SelectedValueChanged="@(( v ) => ( (CellEditContext)context ).CellValue = v)">
                    <SelectItem TValue="string" Value="null">All</SelectItem>
                    @foreach (var item in DoorTypeOptions.Options)
                    {
                        <SelectItem TValue="string" Value="@item.ValueField">@item.ValueField</SelectItem>
                    }
                </Select>
            </EditTemplate>
        </DataGridSelectColumn>
        <DataGridSelectColumn TItem="DoorSetGridRowViewModel" Field=@nameof(DoorSetGridRowViewModel.DoorStyleName) Caption="Style" Width="50" Sortable="true" Editable="true">
            <EditTemplate>
                <Select TValue="string" SelectedValue="@((string)( ( (CellEditContext)context ).CellValue ))" SelectedValueChanged="@(( v ) => ( (CellEditContext)context ).CellValue = v)">
                    <SelectItem TValue="string" Value="null">All</SelectItem>
                    @foreach (var item in DoorStyleOptions.Options)
                    {
                        <SelectGroup>@item.GroupName</SelectGroup>
                        <SelectItem TValue="string" Value="@item.ValueField">@item.ValueField</SelectItem>
                    }
                </Select>
            </EditTemplate>
        </DataGridSelectColumn>
      <DataGridNumericColumn TItem="DoorSetGridRowViewModel" Field=@nameof(DoorSetGridRowViewModel.Width) Caption="Width" Sortable="true" Editable="true" Width="40" DisplayFormat="{0:N4}"></DataGridNumericColumn>
        <DataGridNumericColumn TItem="DoorSetGridRowViewModel" Field=@nameof(DoorSetGridRowViewModel.Height) Caption="Height" Sortable="true" Editable="true" Width="40" DisplayFormat="{0:N4}"></DataGridNumericColumn>*@
    @*<DataGridSelectColumn TItem="DoorSetGridRowViewModel" Field=@nameof(DoorSetGridRowViewModel.PanelMaterialName) Caption="Panel" Sortable="true" Editable="true" Width="50">
            <EditTemplate>
                <Select TValue="string" SelectedValue="@((string)( ( (CellEditContext)context ).CellValue ))" SelectedValueChanged="@(( v ) => ( (CellEditContext)context ).CellValue = v)">

                    <SelectItem TValue="string" Value="null">All</SelectItem>
                    @foreach (var item in PanelMaterialOptions.Options)
                    {
                        <SelectGroup>@item.GroupName</SelectGroup>
                        <SelectItem TValue="string" Value="@item.ValueField">@item.ValueField</SelectItem>
                    }
                </Select>
            </EditTemplate>
        </DataGridSelectColumn>*@



</DataGrid>
@code {

    public IEnumerable<Film> Films { get; set; }
    public List<Genre> Genres { get; set; }
    [Inject] protected IToaster Toaster { get; set; }
    public Film SelectedFilm { get; set; }

    protected override Task OnInitializedAsync()
    {
        Genres = Genre.GetNewList();
        Films = Film.GetNewList(Genres);

        SelectedFilm = Films.First();
        return base.OnInitializedAsync();
    }

    public void RowSelectHandler(Film args)
    {
        Toaster.Info($"Row Selected {args.Title}");
    }
    public void RowUpdatedHandler(SavedRowItem<Film, Dictionary<string, object>> e)
    {
        Toaster.Info($"Row Updated {e.Item.Title}");
    }

    public void RowRemovedHandler(CancellableRowChange<Film> e)
    {
        Toaster.Info($"Row Removed{e.Item.Title}");
    }

    public void RowInsertedHandler(SavedRowItem<Film, Dictionary<string, object>> e)
    {
        Toaster.Info($"Row Inserted{e.Item.Title}");

    }
}